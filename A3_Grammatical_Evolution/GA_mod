import numpy as np
from scipy.sparse import lil_matrix
import random
import json
import sys
import os
from pathlib import Path

from EA import Evolutive_algorithm
import aux

class Genetic_Algorithm_GE(Evolutive_algorithm):
    """
    Child class from AE implementing a genetic algorithm (GA) for the Grammatical
    Evolution problem.
    """

    def __init__(self, parameters):
        """
        Initialize the algorithm with the given parameters.
        
        :parameters
        - parameters: A dictionary containing the parameters for the GA.
        """
        self.params = parameters
        self.n_gen = parameters["n_gen"]
        self.n_pop = parameters["n_pop"]
        self.max_kernels=10
        self.ps = parameters["ps"]
        self.t_size = parameters["t_size"]
        self.n_tournaments = self.n_pop
        self.pc = parameters["pc"]
        self.pm = parameters["pm"]
        self.elitism = parameters["elitism"]

        super().__init__(name="Grammatical Evolution Genetic Algorithm")
        self.parameters = parameters

    def init_pop(self):
        """
        Initialize the population sparse matrix with radnom integer vectors of 
        random lenght.
        """
        print("Initializing population...")
    
        self.pop = lil_matrix((self.n_pop, 15*self.max_kernels), dtype=np.int32)

        for i in range(self.n_pop):
            #Inicializo generando entre 1 y 4 kernels
            n_kernels=random.randint(1,self.max_kernels//3)
            self.pop[i,:n_kernels*15]= np.random.randint(1, 256, 
                                                         size=(n_kernels*15))
    